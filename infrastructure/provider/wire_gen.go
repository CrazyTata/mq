// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"github.com/google/wire"
	"mq/application/consumer"
	"mq/application/service"
	"mq/application/service/facade"
	"mq/infrastructure/queue"
	"mq/infrastructure/svc"
)

// Injectors from wire.go:

// InitializeUserFacade 初始化统计门面服务
func InitializeUserFacade(svcCtx *svc.ServiceContext) *facade.UserFacade {
	patientRepository := ProviderPatientRepo(svcCtx)
	patientService := ProviderPatientService(patientRepository)
	appointmentRepository := ProviderAppointmentRepo(svcCtx)
	appointmentService := ProviderAppointmentService(appointmentRepository)
	healthRepository := ProviderHealthRepo(svcCtx)
	queueManager := ProviderQueueManager(svcCtx)
	healthService := ProviderHealthService(healthRepository, queueManager)
	operationRepository := ProviderOperationRepo(svcCtx)
	operationService := ProviderOperationService(operationRepository)
	statisticsRepository := ProviderStatisticsRepo(svcCtx)
	statisticsService := ProviderStatisticsService(statisticsRepository)
	userRepository := ProviderUserRepo(svcCtx)
	smsInterface := ProviderSmsService(svcCtx)
	emailInterface := ProviderEmailService(svcCtx)
	userService := ProviderUserService(svcCtx, userRepository, smsInterface, emailInterface)
	userFacade := ProviderUserFacade(patientService, appointmentService, healthService, operationService, statisticsService, userService)
	return userFacade
}

// InitializeAppointmentService 初始化预约服务
func InitializeAppointmentService(svcCtx *svc.ServiceContext) *service.AppointmentService {
	appointmentRepository := ProviderAppointmentRepo(svcCtx)
	appointmentService := ProviderAppointmentService(appointmentRepository)
	return appointmentService
}

// InitializeHealthService 初始化健康服务
func InitializeHealthService(svcCtx *svc.ServiceContext) *service.HealthService {
	healthRepository := ProviderHealthRepo(svcCtx)
	queueManager := ProviderQueueManager(svcCtx)
	healthService := ProviderHealthService(healthRepository, queueManager)
	return healthService
}

// InitializeOperationService 初始化操作记录服务
func InitializeOperationService(svcCtx *svc.ServiceContext) *service.OperationService {
	operationRepository := ProviderOperationRepo(svcCtx)
	operationService := ProviderOperationService(operationRepository)
	return operationService
}

// InitializePatientService 初始化患者服务
func InitializePatientService(svcCtx *svc.ServiceContext) *service.PatientService {
	patientRepository := ProviderPatientRepo(svcCtx)
	patientService := ProviderPatientService(patientRepository)
	return patientService
}

// InitializeStatisticsService 初始化统计服务
func InitializeStatisticsService(svcCtx *svc.ServiceContext) *service.StatisticsService {
	statisticsRepository := ProviderStatisticsRepo(svcCtx)
	statisticsService := ProviderStatisticsService(statisticsRepository)
	return statisticsService
}

// InitializeUserService 初始化用户服务
func InitializeUserService(svcCtx *svc.ServiceContext) *service.UserService {
	userRepository := ProviderUserRepo(svcCtx)
	smsInterface := ProviderSmsService(svcCtx)
	emailInterface := ProviderEmailService(svcCtx)
	userService := ProviderUserService(svcCtx, userRepository, smsInterface, emailInterface)
	return userService
}

// InitializeToolService 初始化工具服务
func InitializeToolService(svcCtx *svc.ServiceContext) *service.ToolService {
	uploadInterface := ProviderUploadRepo(svcCtx)
	toolService := ProviderToolService(uploadInterface)
	return toolService
}

// InitializeHealthConsumer 初始化健康消费者
func InitializeHealthConsumer(svcCtx *svc.ServiceContext) *consumer.HealthConsumer {
	queueManager := ProviderQueueManager(svcCtx)
	patientRepository := ProviderPatientRepo(svcCtx)
	patientService := ProviderPatientService(patientRepository)
	appointmentRepository := ProviderAppointmentRepo(svcCtx)
	appointmentService := ProviderAppointmentService(appointmentRepository)
	healthRepository := ProviderHealthRepo(svcCtx)
	healthService := ProviderHealthService(healthRepository, queueManager)
	operationRepository := ProviderOperationRepo(svcCtx)
	operationService := ProviderOperationService(operationRepository)
	statisticsRepository := ProviderStatisticsRepo(svcCtx)
	statisticsService := ProviderStatisticsService(statisticsRepository)
	userRepository := ProviderUserRepo(svcCtx)
	smsInterface := ProviderSmsService(svcCtx)
	emailInterface := ProviderEmailService(svcCtx)
	userService := ProviderUserService(svcCtx, userRepository, smsInterface, emailInterface)
	userFacade := ProviderUserFacade(patientService, appointmentService, healthService, operationService, statisticsService, userService)
	healthConsumer := ProviderHealthConsumer(queueManager, userFacade)
	return healthConsumer
}

// InitializeConsumerManager 初始化消费者管理器
func InitializeConsumerManager(svcCtx *svc.ServiceContext) *queue.ConsumerManager {
	queueManager := ProviderQueueManager(svcCtx)
	consumerManager := ProviderConsumerManager(queueManager)
	return consumerManager
}

// wire.go:

// userProviderSet 定义用户服务相关的依赖提供者
var providerSet = wire.NewSet(

	RepositoryProviderSet,

	ServiceProviderSet,

	FacedeServiceProviderSet,
)
