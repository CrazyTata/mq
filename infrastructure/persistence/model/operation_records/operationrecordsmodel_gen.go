// Code generated by goctl. DO NOT EDIT.

package operation_records

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	operationRecordsFieldNames          = builder.RawFieldNames(&OperationRecords{})
	operationRecordsRows                = strings.Join(operationRecordsFieldNames, ",")
	operationRecordsRowsExpectAutoSet   = strings.Join(stringx.Remove(operationRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	operationRecordsRowsWithPlaceHolder = strings.Join(stringx.Remove(operationRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOperationRecordsIdPrefix = "cache:operationRecords:id:"
)

type (
	operationRecordsModel interface {
		Insert(ctx context.Context, data *OperationRecords) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OperationRecords, error)
		Update(ctx context.Context, data *OperationRecords) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOperationRecordsModel struct {
		sqlc.CachedConn
		table string
	}

	OperationRecords struct {
		Id        int64          `db:"id"`
		Action    string         `db:"action"`     // 操作
		Target    string         `db:"target"`     // 目标
		Details   sql.NullString `db:"details"`    // 详情
		Username  string         `db:"username"`   // 用户名
		UserId    string         `db:"user_id"`    // 用户ID
		IsDeleted int64          `db:"is_deleted"` // 是否删除
		CreatedAt time.Time      `db:"created_at"` // 创建时间
		UpdatedAt time.Time      `db:"updated_at"` // 更新时间
	}
)

func newOperationRecordsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOperationRecordsModel {
	return &defaultOperationRecordsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`operation_records`",
	}
}

func (m *defaultOperationRecordsModel) Delete(ctx context.Context, id int64) error {
	operationRecordsIdKey := fmt.Sprintf("%s%v", cacheOperationRecordsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, operationRecordsIdKey)
	return err
}

func (m *defaultOperationRecordsModel) FindOne(ctx context.Context, id int64) (*OperationRecords, error) {
	operationRecordsIdKey := fmt.Sprintf("%s%v", cacheOperationRecordsIdPrefix, id)
	var resp OperationRecords
	err := m.QueryRowCtx(ctx, &resp, operationRecordsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", operationRecordsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOperationRecordsModel) Insert(ctx context.Context, data *OperationRecords) (sql.Result, error) {
	operationRecordsIdKey := fmt.Sprintf("%s%v", cacheOperationRecordsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, operationRecordsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Action, data.Target, data.Details, data.Username, data.UserId, data.IsDeleted)
	}, operationRecordsIdKey)
	return ret, err
}

func (m *defaultOperationRecordsModel) Update(ctx context.Context, data *OperationRecords) error {
	operationRecordsIdKey := fmt.Sprintf("%s%v", cacheOperationRecordsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, operationRecordsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Action, data.Target, data.Details, data.Username, data.UserId, data.IsDeleted, data.Id)
	}, operationRecordsIdKey)
	return err
}

func (m *defaultOperationRecordsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOperationRecordsIdPrefix, primary)
}

func (m *defaultOperationRecordsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", operationRecordsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOperationRecordsModel) tableName() string {
	return m.table
}
