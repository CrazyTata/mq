// Code generated by goctl. DO NOT EDIT.

package subject

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	subjectFieldNames          = builder.RawFieldNames(&Subject{})
	subjectRows                = strings.Join(subjectFieldNames, ",")
	subjectRowsExpectAutoSet   = strings.Join(stringx.Remove(subjectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	subjectRowsWithPlaceHolder = strings.Join(stringx.Remove(subjectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSubjectIdPrefix    = "cache:subject:id:"
	cacheSubjectAppIdPrefix = "cache:subject:appId:"
)

type (
	subjectModel interface {
		Insert(ctx context.Context, data *Subject) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Subject, error)
		FindOneByAppId(ctx context.Context, appId string) (*Subject, error)
		Update(ctx context.Context, data *Subject) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSubjectModel struct {
		sqlc.CachedConn
		table string
	}

	Subject struct {
		Id           int64          `db:"id"`
		AppId        string         `db:"app_id"`        // API密钥标识
		AppSecret    string         `db:"app_secret"`    // API密钥(加密存储)
		MerchantId   string         `db:"merchant_id"`   // 商户ID
		MerchantName string         `db:"merchant_name"` // 商户名称
		IsActive     int64          `db:"is_active"`     // 是否激活 1: 激活 0: 禁用
		ExpireAt     sql.NullTime   `db:"expire_at"`     // 过期时间
		AllowedIps   sql.NullString `db:"allowed_ips"`   // 允许的IP地址列表,用逗号分隔
		AllowedPaths sql.NullString `db:"allowed_paths"` // 允许访问的路径,用逗号分隔
		IsDeleted    int64          `db:"is_deleted"`    // 是否删除
		CreatedAt    time.Time      `db:"created_at"`
		UpdatedAt    time.Time      `db:"updated_at"`
	}
)

func newSubjectModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSubjectModel {
	return &defaultSubjectModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`subject`",
	}
}

func (m *defaultSubjectModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	subjectAppIdKey := fmt.Sprintf("%s%v", cacheSubjectAppIdPrefix, data.AppId)
	subjectIdKey := fmt.Sprintf("%s%v", cacheSubjectIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, subjectAppIdKey, subjectIdKey)
	return err
}

func (m *defaultSubjectModel) FindOne(ctx context.Context, id int64) (*Subject, error) {
	subjectIdKey := fmt.Sprintf("%s%v", cacheSubjectIdPrefix, id)
	var resp Subject
	err := m.QueryRowCtx(ctx, &resp, subjectIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", subjectRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSubjectModel) FindOneByAppId(ctx context.Context, appId string) (*Subject, error) {
	subjectAppIdKey := fmt.Sprintf("%s%v", cacheSubjectAppIdPrefix, appId)
	var resp Subject
	err := m.QueryRowIndexCtx(ctx, &resp, subjectAppIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `app_id` = ? limit 1", subjectRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, appId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSubjectModel) Insert(ctx context.Context, data *Subject) (sql.Result, error) {
	subjectAppIdKey := fmt.Sprintf("%s%v", cacheSubjectAppIdPrefix, data.AppId)
	subjectIdKey := fmt.Sprintf("%s%v", cacheSubjectIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, subjectRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AppId, data.AppSecret, data.MerchantId, data.MerchantName, data.IsActive, data.ExpireAt, data.AllowedIps, data.AllowedPaths, data.IsDeleted)
	}, subjectAppIdKey, subjectIdKey)
	return ret, err
}

func (m *defaultSubjectModel) Update(ctx context.Context, newData *Subject) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	subjectAppIdKey := fmt.Sprintf("%s%v", cacheSubjectAppIdPrefix, data.AppId)
	subjectIdKey := fmt.Sprintf("%s%v", cacheSubjectIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, subjectRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.AppId, newData.AppSecret, newData.MerchantId, newData.MerchantName, newData.IsActive, newData.ExpireAt, newData.AllowedIps, newData.AllowedPaths, newData.IsDeleted, newData.Id)
	}, subjectAppIdKey, subjectIdKey)
	return err
}

func (m *defaultSubjectModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSubjectIdPrefix, primary)
}

func (m *defaultSubjectModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", subjectRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSubjectModel) tableName() string {
	return m.table
}
