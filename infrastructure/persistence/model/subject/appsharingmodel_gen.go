// Code generated by goctl. DO NOT EDIT.

package subject

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appSharingFieldNames          = builder.RawFieldNames(&AppSharing{})
	appSharingRows                = strings.Join(appSharingFieldNames, ",")
	appSharingRowsExpectAutoSet   = strings.Join(stringx.Remove(appSharingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appSharingRowsWithPlaceHolder = strings.Join(stringx.Remove(appSharingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAppSharingIdPrefix = "cache:appSharing:id:"
)

type (
	appSharingModel interface {
		Insert(ctx context.Context, data *AppSharing) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppSharing, error)
		Update(ctx context.Context, data *AppSharing) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppSharingModel struct {
		sqlc.CachedConn
		table string
	}

	AppSharing struct {
		Id          int64     `db:"id"`
		AppId       string    `db:"app_id"`        // 发起共享的应用
		SharedAppId string    `db:"shared_app_id"` // 共享目标应用
		IsDeleted   int64     `db:"is_deleted"`    // 是否删除
		CreatedAt   time.Time `db:"created_at"`    // 创建时间
		UpdatedAt   time.Time `db:"updated_at"`    // 更新时间
	}
)

func newAppSharingModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAppSharingModel {
	return &defaultAppSharingModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`app_sharing`",
	}
}

func (m *defaultAppSharingModel) Delete(ctx context.Context, id int64) error {
	appSharingIdKey := fmt.Sprintf("%s%v", cacheAppSharingIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, appSharingIdKey)
	return err
}

func (m *defaultAppSharingModel) FindOne(ctx context.Context, id int64) (*AppSharing, error) {
	appSharingIdKey := fmt.Sprintf("%s%v", cacheAppSharingIdPrefix, id)
	var resp AppSharing
	err := m.QueryRowCtx(ctx, &resp, appSharingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appSharingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppSharingModel) Insert(ctx context.Context, data *AppSharing) (sql.Result, error) {
	appSharingIdKey := fmt.Sprintf("%s%v", cacheAppSharingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, appSharingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AppId, data.SharedAppId, data.IsDeleted)
	}, appSharingIdKey)
	return ret, err
}

func (m *defaultAppSharingModel) Update(ctx context.Context, data *AppSharing) error {
	appSharingIdKey := fmt.Sprintf("%s%v", cacheAppSharingIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appSharingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AppId, data.SharedAppId, data.IsDeleted, data.Id)
	}, appSharingIdKey)
	return err
}

func (m *defaultAppSharingModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAppSharingIdPrefix, primary)
}

func (m *defaultAppSharingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appSharingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAppSharingModel) tableName() string {
	return m.table
}
