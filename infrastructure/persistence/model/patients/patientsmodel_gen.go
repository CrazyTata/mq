// Code generated by goctl. DO NOT EDIT.

package patients

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	patientsFieldNames          = builder.RawFieldNames(&Patients{})
	patientsRows                = strings.Join(patientsFieldNames, ",")
	patientsRowsExpectAutoSet   = strings.Join(stringx.Remove(patientsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	patientsRowsWithPlaceHolder = strings.Join(stringx.Remove(patientsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePatientsIdPrefix = "cache:patients:id:"
)

type (
	patientsModel interface {
		Insert(ctx context.Context, data *Patients) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Patients, error)
		Update(ctx context.Context, data *Patients) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPatientsModel struct {
		sqlc.CachedConn
		table string
	}

	Patients struct {
		Id          int64          `db:"id"`
		FriendlyId  string         `db:"friendly_id"` // 友好ID
		Name        string         `db:"name"`        // 姓名
		Age         int64          `db:"age"`         // 年龄
		Gender      string         `db:"gender"`      // 性别
		Phone       string         `db:"phone"`       // 手机号
		Status      string         `db:"status"`      // 状态
		LastVisit   sql.NullTime   `db:"last_visit"`  // 最后就诊时间
		Avatar      sql.NullString `db:"avatar"`      // 头像
		History     sql.NullString `db:"history"`     // 病史
		Allergies   sql.NullString `db:"allergies"`   // 过敏史
		Note        sql.NullString `db:"note"`        // 备注
		Attachments sql.NullString `db:"attachments"` // 附件
		Details     sql.NullString `db:"details"`     // 详情
		UserId      string         `db:"user_id"`     // 用户ID
		IsDeleted   int64          `db:"is_deleted"`  // 是否删除
		CreatedAt   time.Time      `db:"created_at"`  // 创建时间
		UpdatedAt   time.Time      `db:"updated_at"`  // 更新时间
	}
)

func newPatientsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPatientsModel {
	return &defaultPatientsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`patients`",
	}
}

func (m *defaultPatientsModel) Delete(ctx context.Context, id int64) error {
	patientsIdKey := fmt.Sprintf("%s%v", cachePatientsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, patientsIdKey)
	return err
}

func (m *defaultPatientsModel) FindOne(ctx context.Context, id int64) (*Patients, error) {
	patientsIdKey := fmt.Sprintf("%s%v", cachePatientsIdPrefix, id)
	var resp Patients
	err := m.QueryRowCtx(ctx, &resp, patientsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", patientsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPatientsModel) Insert(ctx context.Context, data *Patients) (sql.Result, error) {
	patientsIdKey := fmt.Sprintf("%s%v", cachePatientsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, patientsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FriendlyId, data.Name, data.Age, data.Gender, data.Phone, data.Status, data.LastVisit, data.Avatar, data.History, data.Allergies, data.Note, data.Attachments, data.Details, data.UserId, data.IsDeleted)
	}, patientsIdKey)
	return ret, err
}

func (m *defaultPatientsModel) Update(ctx context.Context, data *Patients) error {
	patientsIdKey := fmt.Sprintf("%s%v", cachePatientsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, patientsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FriendlyId, data.Name, data.Age, data.Gender, data.Phone, data.Status, data.LastVisit, data.Avatar, data.History, data.Allergies, data.Note, data.Attachments, data.Details, data.UserId, data.IsDeleted, data.Id)
	}, patientsIdKey)
	return err
}

func (m *defaultPatientsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePatientsIdPrefix, primary)
}

func (m *defaultPatientsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", patientsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPatientsModel) tableName() string {
	return m.table
}
