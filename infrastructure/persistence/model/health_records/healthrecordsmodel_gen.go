// Code generated by goctl. DO NOT EDIT.

package health_records

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	healthRecordsFieldNames          = builder.RawFieldNames(&HealthRecords{})
	healthRecordsRows                = strings.Join(healthRecordsFieldNames, ",")
	healthRecordsRowsExpectAutoSet   = strings.Join(stringx.Remove(healthRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	healthRecordsRowsWithPlaceHolder = strings.Join(stringx.Remove(healthRecordsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHealthRecordsIdPrefix = "cache:healthRecords:id:"
)

type (
	healthRecordsModel interface {
		Insert(ctx context.Context, data *HealthRecords) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HealthRecords, error)
		Update(ctx context.Context, data *HealthRecords) error
		Delete(ctx context.Context, id int64) error
	}

	defaultHealthRecordsModel struct {
		sqlc.CachedConn
		table string
	}

	HealthRecords struct {
		Id          int64          `db:"id"`
		PatientId   int64          `db:"patient_id"`   // 患者ID
		PatientName string         `db:"patient_name"` // 患者姓名
		Date        sql.NullTime   `db:"date"`         // 日期
		RecordType  string         `db:"record_type"`  // 记录类型
		Diagnosis   sql.NullString `db:"diagnosis"`    // 诊断
		Treatment   sql.NullString `db:"treatment"`    // 治疗
		Notes       sql.NullString `db:"notes"`        // 备注
		VitalSigns  sql.NullString `db:"vital_signs"`  // 生命体征
		Medications sql.NullString `db:"medications"`  // 药物
		Attachments sql.NullString `db:"attachments"`  // 附件
		UserId      string         `db:"user_id"`      // 用户ID
		IsDeleted   int64          `db:"is_deleted"`   // 是否删除
		CreatedAt   time.Time      `db:"created_at"`   // 创建时间
		UpdatedAt   time.Time      `db:"updated_at"`   // 更新时间
	}
)

func newHealthRecordsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultHealthRecordsModel {
	return &defaultHealthRecordsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`health_records`",
	}
}

func (m *defaultHealthRecordsModel) Delete(ctx context.Context, id int64) error {
	healthRecordsIdKey := fmt.Sprintf("%s%v", cacheHealthRecordsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, healthRecordsIdKey)
	return err
}

func (m *defaultHealthRecordsModel) FindOne(ctx context.Context, id int64) (*HealthRecords, error) {
	healthRecordsIdKey := fmt.Sprintf("%s%v", cacheHealthRecordsIdPrefix, id)
	var resp HealthRecords
	err := m.QueryRowCtx(ctx, &resp, healthRecordsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", healthRecordsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHealthRecordsModel) Insert(ctx context.Context, data *HealthRecords) (sql.Result, error) {
	healthRecordsIdKey := fmt.Sprintf("%s%v", cacheHealthRecordsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, healthRecordsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PatientId, data.PatientName, data.Date, data.RecordType, data.Diagnosis, data.Treatment, data.Notes, data.VitalSigns, data.Medications, data.Attachments, data.UserId, data.IsDeleted)
	}, healthRecordsIdKey)
	return ret, err
}

func (m *defaultHealthRecordsModel) Update(ctx context.Context, data *HealthRecords) error {
	healthRecordsIdKey := fmt.Sprintf("%s%v", cacheHealthRecordsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, healthRecordsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PatientId, data.PatientName, data.Date, data.RecordType, data.Diagnosis, data.Treatment, data.Notes, data.VitalSigns, data.Medications, data.Attachments, data.UserId, data.IsDeleted, data.Id)
	}, healthRecordsIdKey)
	return err
}

func (m *defaultHealthRecordsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHealthRecordsIdPrefix, primary)
}

func (m *defaultHealthRecordsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", healthRecordsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultHealthRecordsModel) tableName() string {
	return m.table
}
